networks:
  backend-network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  backend_logs:
    driver: local

services:
  # PostgreSQL 데이터베이스
  postgres:
    image: postgres:15.12
    container_name: seuraseung-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: seuraseung
      POSTGRES_USER: seuraseung
      POSTGRES_PASSWORD: seuraseung123!
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ../database/postgresql/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
      - ../logs/postgresql:/var/log/postgresql
    ports:
      - "5432:5432"
    networks:
      - backend-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U seuraseung -d seuraseung"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  # Redis 캐시
  redis:
    image: redis:6.0-alpine
    container_name: seuraseung-redis
    restart: unless-stopped
    command: redis-server --requirepass redis123!
    environment:
      REDIS_PASSWORD: redis123!
    volumes:
      - redis_data:/data
      - ../logs/redis:/var/log/redis
    ports:
      - "6379:6379"
    networks:
      - backend-network
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "redis123!", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s

  # Spring Boot 백엔드
  backend:
    build:
      context: .
      dockerfile: Dockerfile
    image: seuraseung-backend:latest
    container_name: seuraseung-backend
    restart: unless-stopped
    environment:
      # 데이터베이스 환경변수
      DB_URL: jdbc:postgresql://postgres:5432/seuraseung
      DB_USERNAME: seuraseung
      DB_PASSWORD: seuraseung123!
      
      # Redis 환경변수
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_DB: 0
      REDIS_PASSWORD: redis123!
      
      # JWT 키 (256비트 이상)
      JWT_KEY: seuraseung-jwt-secret-key-2024-production-environment-secure-key-minimum-256-bits-for-security
      
      # AWS S3 설정 (빈 값으로 설정, 필요시 deploy.sh에서 .env로 덮어씀)
      AWS_ACCESS_KEY: ""
      AWS_SECRET_KEY: ""
      AWS_REGION: ap-northeast-2
      AWS_BUCKET: profile-qrcode
      
      # 암호화 키
      ENCRYPTION_KEY: MyShuttleQRKey16BytesSecure2024
      
      # CORS 설정
      CORS_ALLOWED_ORIGINS: https://seurasaeng.site,http://13.125.200.221
      
      # 메일 설정 (기본값, deploy.sh에서 .env로 덮어씀)
      MAIL_USERNAME: youjiyeon4@gmail.com
      MAIL_PASSWORD: "hmqv wsha xdgs hdie"
      
      # Spring 프로파일 설정
      SPRING_PROFILES_ACTIVE: prod
      
      # 🔥 JPA 설정 수정 - 첫 배포시 테이블 자동 생성
      SPRING_JPA_HIBERNATE_DDL_AUTO: create-drop
      SPRING_JPA_SHOW_SQL: false
      SPRING_JPA_PROPERTIES_HIBERNATE_DEFAULT_SCHEMA: seurasaeng-prod
      
      # 로깅 설정
      LOGGING_LEVEL_ORG_HIBERNATE_SQL: warn
      LOGGING_LEVEL_ORG_HIBERNATE_TYPE_DESCRIPTOR_SQL_SPI: warn
      
      # Thymeleaf 설정 (프로덕션)
      SPRING_THYMELEAF_CACHE: true
      SPRING_DEVTOOLS_RESTART_ENABLED: false
      
      # Actuator 설정
      MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE: health,info,metrics
      MANAGEMENT_ENDPOINT_HEALTH_SHOW_DETAILS: when-authorized
    env_file:
      - .env  # .env 파일이 있으면 환경변수 덮어쓰기
    volumes:
      - backend_logs:/app/logs
      - ../logs/spring:/app/logs
    ports:
      - "8080:8080"
    networks:
      - backend-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 120s

  # 데이터베이스 초기화
  db-setup:
    image: postgres:15.12
    container_name: seuraseung-db-setup
    networks:
      - backend-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      POSTGRES_USER: seuraseung
      POSTGRES_PASSWORD: seuraseung123!
      REDIS_PASSWORD: redis123!
    volumes:
      - ../database/setup-db.sh:/setup-db.sh:ro
    command: >
      sh -c "
        echo 'Waiting for services to be ready...' &&
        sleep 30 &&
        chmod +x /setup-db.sh &&
        /setup-db.sh &&
        echo 'Database setup completed'
      "
    restart: "no"