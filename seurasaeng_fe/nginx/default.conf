# Upstream 백엔드 서버 설정
upstream backend_servers {
    server 10.0.2.165:8080 max_fails=3 fail_timeout=30s;
    keepalive 32;
}

# HTTP 서버 설정
server {
    listen 80;
    listen [::]:80;
    server_name _;
    
    root /usr/share/nginx/html;
    index index.html index.htm;

    # 로그 설정
    access_log /var/log/nginx/frontend_access.log main;
    error_log /var/log/nginx/frontend_error.log warn;

    # API 요청을 백엔드로 프록시 (백엔드 연결시 주석 해제)
    location /api/ {
        limit_req zone=api burst=20 nodelay;
        
        proxy_pass http://backend_servers;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # CORS 헤더 추가
        add_header 'Access-Control-Allow-Origin' 'http://13.125.200.221' always;
        add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
        add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization' always;
        add_header 'Access-Control-Allow-Credentials' 'true' always;
        
        # OPTIONS 요청 처리
        if ($request_method = 'OPTIONS') {
            add_header 'Access-Control-Allow-Origin' 'http://13.125.200.221' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization' always;
            add_header 'Access-Control-Max-Age' 1728000 always;
            add_header 'Content-Type' 'text/plain; charset=utf-8' always;
            add_header 'Content-Length' 0 always;
            return 204;
        }
        
        # 타임아웃 설정
        proxy_connect_timeout 30s;
        proxy_send_timeout 30s;
        proxy_read_timeout 30s;
        
        # 버퍼링 설정
        proxy_buffering on;
        proxy_buffer_size 4k;
        proxy_buffers 8 4k;
        
        # 에러 페이지 처리
        proxy_intercept_errors on;
        error_page 502 503 504 /50x.html;
    }

    # 프론트엔드만 테스트시 API 요청 처리 (백엔드 없을 때 주석 해제)
    # location /api/ {
    #     add_header 'Access-Control-Allow-Origin' '*' always;
    #     add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
    #     add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization' always;
    #     
    #     if ($request_method = 'OPTIONS') {
    #         add_header 'Access-Control-Allow-Origin' '*' always;
    #         add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
    #         add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization' always;
    #         add_header 'Access-Control-Max-Age' 1728000 always;
    #         add_header 'Content-Type' 'text/plain; charset=utf-8' always;
    #         add_header 'Content-Length' 0 always;
    #         return 204;
    #     }
    #     
    #     return 503 '{"error": "Backend service unavailable", "message": "API is not available in test mode"}';
    #     add_header Content-Type application/json;
    # }

    # 로그인 관련 API 요청 (더 엄격한 제한)
    location /api/auth/ {
        limit_req zone=login burst=5 nodelay;
        
        proxy_pass http://backend_servers;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # CORS 헤더 추가
        add_header 'Access-Control-Allow-Origin' 'http://13.125.200.221' always;
        add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
        add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization' always;
        add_header 'Access-Control-Allow-Credentials' 'true' always;
        
        proxy_connect_timeout 30s;
        proxy_send_timeout 30s;
        proxy_read_timeout 30s;
    }

    # 헬스체크 엔드포인트
    location /health {
        access_log off;
        return 200 "healthy\n";
        add_header Content-Type text/plain;
    }

    # React Router를 위한 설정 (SPA)
    location / {
        try_files $uri $uri/ /index.html;
        
        # 정적 파일 캐싱
        location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
            expires 1y;
            add_header Cache-Control "public, immutable";
            access_log off;
            
            # 폰트 파일 CORS 허용
            add_header 'Access-Control-Allow-Origin' '*' always;
        }
        
        # HTML 파일은 캐싱하지 않음
        location ~* \.html$ {
            expires -1;
            add_header Cache-Control "no-cache, no-store, must-revalidate";
            add_header Pragma "no-cache";
        }
    }

    # 보안 설정
    location ~ /\. {
        deny all;
        access_log off;
        log_not_found off;
    }

    location ~* \.(env|git|gitignore|dockerignore)$ {
        deny all;
        access_log off;
        log_not_found off;
    }

    # 에러 페이지 설정
    error_page 404 /index.html;
    error_page 500 502 503 504 /50x.html;
    
    location = /50x.html {
        root /usr/share/nginx/html;
        internal;
    }
}

# HTTPS 설정 (SSL 인증서 적용시 주석 해제)
# server {
#     listen 443 ssl http2;
#     listen [::]:443 ssl http2;
#     server_name seurasaeng.site www.seurasaeng.site;
#
#     ssl_certificate /etc/letsencrypt/live/seurasaeng.site/fullchain.pem;
#     ssl_certificate_key /etc/letsencrypt/live/seurasaeng.site/privkey.pem;
#     
#     # SSL 최적화
#     ssl_session_cache shared:SSL:10m;
#     ssl_session_timeout 10m;
#     ssl_prefer_server_ciphers on;
#     ssl_protocols TLSv1.2 TLSv1.3;
#     ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-CHACHA20-POLY1305;
#
#     # 위의 HTTP 서버 설정과 동일한 내용 적용
#     root /usr/share/nginx/html;
#     index index.html index.htm;
#
#     access_log /var/log/nginx/frontend_access.log main;
#     error_log /var/log/nginx/frontend_error.log warn;
#
#     # API 프록시 설정 (HTTP와 동일)
#     location /api/ {
#         limit_req zone=api burst=20 nodelay;
#         proxy_pass http://backend_servers;
#         proxy_set_header Host $host;
#         proxy_set_header X-Real-IP $remote_addr;
#         proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
#         proxy_set_header X-Forwarded-Proto $scheme;
#         
#         add_header 'Access-Control-Allow-Origin' 'https://seurasaeng.site' always;
#         add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
#         add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization' always;
#         add_header 'Access-Control-Allow-Credentials' 'true' always;
#
#         proxy_connect_timeout 30s;
#         proxy_send_timeout 30s;
#         proxy_read_timeout 30s;
#     }
#
#     # 헬스체크
#     location /health {
#         access_log off;
#         return 200 "healthy\n";
#         add_header Content-Type text/plain;
#     }
#
#     # SPA 라우팅
#     location / {
#         try_files $uri $uri/ /index.html;
#         
#         location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
#             expires 1y;
#             add_header Cache-Control "public, immutable";
#             access_log off;
#         }
#         
#         location ~* \.html$ {
#             expires -1;
#             add_header Cache-Control "no-cache, no-store, must-revalidate";
#             add_header Pragma "no-cache";
#         }
#     }
#
#     error_page 404 /index.html;
#     error_page 500 502 503 504 /50x.html;
# }

# HTTP to HTTPS 리디렉션 (SSL 적용시 주석 해제)
# server {
#     listen 80;
#     listen [::]:80;
#     server_name seurasaeng.site www.seurasaeng.site;
#     return 301 https://$host$request_uri;
# }