name: Deploy Backend to AWS EC2

on:
  push:
    branches:
      - main
    paths:
      - 'seurasaeng_be/**'
  workflow_dispatch:

env:
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1

jobs:
  # 백엔드 빌드 및 배포
  deploy-backend:
    name: Deploy Spring Boot Backend to Private Server
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
        cache: maven
        
    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-
        
    - name: Run tests
      run: |
        cd seurasaeng_be
        mvn clean test -Dspring.profiles.active=test
        
    - name: Build with Maven
      run: |
        cd seurasaeng_be
        mvn clean package -DskipTests -Dspring.profiles.active=prod
        
    - name: Verify JAR file
      run: |
        cd seurasaeng_be
        ls -la target/
        if [ ! -f target/seurasaeng-0.0.1-SNAPSHOT.jar ]; then
          echo "JAR file not found!"
          exit 1
        fi
        echo "JAR file verification completed"
        
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
        
    - name: Build Docker image (ARM64) for production
      run: |
        cd seurasaeng_be
        docker buildx build \
          --platform linux/arm64 \
          --build-arg SPRING_PROFILES_ACTIVE=prod \
          -t seuraseung-backend:latest . \
          --load
          
    - name: Verify Docker image
      run: |
        docker images | grep seuraseung-backend
        echo "Docker image verification completed"
        
    - name: Save Docker image
      run: |
        docker save seuraseung-backend:latest | gzip > seurasaeng_be-image.tar.gz
        
    - name: Copy files to Back Server via Front Server
      uses: appleboy/scp-action@v0.1.5
      with:
        host: ${{ secrets.FRONT_SERVER_HOST }}
        username: ubuntu
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        source: "seurasaeng_be-image.tar.gz,seurasaeng_be/deploy.sh,seurasaeng_be/docker-compose.yml,seurasaeng_be/application-prod.yml,database/"
        target: "/home/ubuntu/"
        timeout: 600s
        
    - name: Deploy Backend with Database Setup
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.FRONT_SERVER_HOST }}
        username: ubuntu
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        timeout: 900s
        script: |
          set -e
          
          echo "🚀 Starting backend deployment..."
          
          # Back Server로 파일 전송
          echo "📦 Transferring files to back server..."
          scp -o StrictHostKeyChecking=no -r /home/ubuntu/seurasaeng_be-image.tar.gz ubuntu@10.0.2.166:/home/ubuntu/
          scp -o StrictHostKeyChecking=no -r /home/ubuntu/seurasaeng_be/ ubuntu@10.0.2.166:/home/ubuntu/
          scp -o StrictHostKeyChecking=no -r /home/ubuntu/database/ ubuntu@10.0.2.166:/home/ubuntu/
          
          # Back Server에서 배포 실행
          echo "🎯 Executing deployment on back server..."
          ssh -o StrictHostKeyChecking=no ubuntu@10.0.2.166 'bash /home/ubuntu/seurasaeng_be/deploy.sh'
          
          echo "✅ Backend deployment completed"

    - name: Backend Integration Test via Front Server
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.FRONT_SERVER_HOST }}
        username: ubuntu
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        timeout: 300s
        script: |
          set -e
          
          echo "🔍 Starting backend integration test..."
          
          # Back Server 헬스체크
          MAX_ATTEMPTS=30
          ATTEMPT=1
          
          while [ $ATTEMPT -le $MAX_ATTEMPTS ]; do
            echo "⏳ Testing backend health... (${ATTEMPT}/${MAX_ATTEMPTS})"
            
            if ssh -o StrictHostKeyChecking=no ubuntu@10.0.2.166 'curl -f -s http://localhost:8080/actuator/health' > /dev/null; then
              echo "✅ Backend health check passed"
              break
            fi
            
            if [ $ATTEMPT -eq $MAX_ATTEMPTS ]; then
              echo "❌ Backend health check failed after ${MAX_ATTEMPTS} attempts"
              echo "📋 Container status:"
              ssh -o StrictHostKeyChecking=no ubuntu@10.0.2.166 'cd seurasaeng_be && docker-compose ps'
              echo "📋 Backend logs:"
              ssh -o StrictHostKeyChecking=no ubuntu@10.0.2.166 'docker logs seuraseung-backend --tail=50'
              exit 1
            fi
            
            sleep 10
            ATTEMPT=$((ATTEMPT + 1))
          done
          
          # 데이터베이스 연결 테스트
          echo "🗄️ Testing database connectivity..."
          if ssh -o StrictHostKeyChecking=no ubuntu@10.0.2.166 'curl -f -s http://localhost:8080/actuator/health' | grep -q "UP"; then
            echo "✅ Database connectivity verified"
          else
            echo "⚠️ Database connectivity test failed"
          fi
          
          # 프론트엔드에서 백엔드 API 테스트
          echo "🔗 Testing frontend to backend connectivity..."
          if curl -f -s http://10.0.2.166:8080/actuator/health > /dev/null; then
            echo "✅ Frontend can reach backend API"
          else
            echo "⚠️ Frontend to backend connectivity test failed"
          fi
          
          # Redis 연결 테스트
          echo "📊 Testing Redis connectivity..."
          if ssh -o StrictHostKeyChecking=no ubuntu@10.0.2.166 'docker exec seuraseung-redis redis-cli -a redis123! ping' | grep -q "PONG"; then
            echo "✅ Redis connectivity verified"
          else
            echo "⚠️ Redis connectivity test failed"
          fi
          
          # PostgreSQL 연결 테스트
          echo "🐘 Testing PostgreSQL connectivity..."
          if ssh -o StrictHostKeyChecking=no ubuntu@10.0.2.166 'docker exec seuraseung-postgres pg_isready -U seuraseung -d seuraseung' | grep -q "accepting connections"; then
            echo "✅ PostgreSQL connectivity verified"
          else
            echo "⚠️ PostgreSQL connectivity test failed"
          fi
          
          echo "🎉 Backend integration test completed!"

  # 배포 후 알림 및 정리
  post-deployment:
    name: Post Backend Deployment Tasks
    runs-on: ubuntu-latest
    needs: deploy-backend
    if: always()
    
    steps:
    - name: Backend Deployment Summary
      run: |
        echo "## Backend Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "- **Status**: ${{ needs.deploy-backend.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Deployment Time**: $(date)" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ needs.deploy-backend.result }}" = "success" ]; then
          echo "- **Backend API**: http://10.0.2.166:8080" >> $GITHUB_STEP_SUMMARY
          echo "- **Frontend Proxy**: https://seurasaeng.site/api" >> $GITHUB_STEP_SUMMARY
          echo "- **Health Check**: http://10.0.2.166:8080/actuator/health" >> $GITHUB_STEP_SUMMARY
          echo "- **Database**: PostgreSQL (seurasaeng-prod schema)" >> $GITHUB_STEP_SUMMARY
          echo "- **Cache**: Redis (database 0)" >> $GITHUB_STEP_SUMMARY
          echo "- **Status**: ✅ SUCCESS" >> $GITHUB_STEP_SUMMARY
        else
          echo "- **Status**: ❌ FAILED" >> $GITHUB_STEP_SUMMARY
          echo "- **Action Required**: Check deployment logs and service status" >> $GITHUB_STEP_SUMMARY
        fi

    - name: Cleanup on Failure
      if: failure()
      run: |
        echo "🚨 Backend deployment failed! Manual intervention may be required."
        echo "🔍 Check the following:"
        echo "  1. Server connectivity"
        echo "  2. Docker container status"
        echo "  3. Database connections"
        echo "  4. Application configuration"
        echo "  5. Maven build issues"
        echo "  6. Java 21 compatibility"