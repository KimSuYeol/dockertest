name: Deploy Frontend to AWS EC2

on:
  push:
    branches:
      - main
    paths:
      - 'seurasaeng_fe/**'
  workflow_dispatch:

env:
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1

jobs:
  # 프론트엔드 빌드 및 배포
  deploy-frontend:
    name: Deploy Frontend to Public Server
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: seurasaeng_fe/package-lock.json
        
    - name: Install dependencies
      run: |
        cd seurasaeng_fe
        npm ci
        
    - name: Run tests (optional)
      run: |
        cd seurasaeng_fe
        # npm run test -- --watchAll=false
        echo "Tests skipped for now"
        
    - name: Build React app
      run: |
        cd seurasaeng_fe
        # 환경변수 설정 후 빌드
        echo "VITE_API_URL=http://13.125.200.221/api" > .env.production
        npm run build
        
    - name: Verify build output
      run: |
        cd seurasaeng_fe
        ls -la dist/
        echo "Build verification completed"
        
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
        
    - name: Build Docker image (ARM64)
      run: |
        cd seurasaeng_fe
        docker buildx build \
          --platform linux/arm64 \
          --build-arg VITE_API_URL=http://13.125.200.221/api \
          -t seuraseung-frontend:latest . \
          --load
          
    - name: Verify Docker image
      run: |
        docker images | grep seuraseung-frontend
        echo "Docker image verification completed"
        
    - name: Save Docker image
      run: |
        docker save seuraseung-frontend:latest | gzip > seurasaeng_fe-image.tar.gz
        
    - name: Copy files to Front Server
      uses: appleboy/scp-action@v0.1.5
      with:
        host: ${{ secrets.FRONT_SERVER_HOST }}
        username: ubuntu
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        source: "seurasaeng_fe-image.tar.gz,seurasaeng_fe/deploy.sh,seurasaeng_fe/docker-compose.yml,seurasaeng_fe/nginx/"
        target: "/home/ubuntu/"
        timeout: 300s
        
    - name: Deploy Frontend with Health Check
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.FRONT_SERVER_HOST }}
        username: ubuntu
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        timeout: 600s
        script: |
          set -e
          
          echo "🚀 Starting frontend deployment..."
          
          # 배포 스크립트 실행 권한 부여 및 실행
          chmod +x /home/ubuntu/seurasaeng_fe/deploy.sh
          bash /home/ubuntu/seurasaeng_fe/deploy.sh
          
          echo "✅ Frontend deployment script completed"

    - name: Frontend Integration Test
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.FRONT_SERVER_HOST }}
        username: ubuntu
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        timeout: 300s
        script: |
          set -e
          
          echo "🔍 Starting frontend integration test..."
          
          # 헬스체크 테스트
          MAX_ATTEMPTS=20
          ATTEMPT=1
          
          while [ $ATTEMPT -le $MAX_ATTEMPTS ]; do
            echo "⏳ Testing frontend health... (${ATTEMPT}/${MAX_ATTEMPTS})"
            
            if curl -f -s http://localhost/health > /dev/null; then
              echo "✅ Frontend health check passed"
              break
            fi
            
            if [ $ATTEMPT -eq $MAX_ATTEMPTS ]; then
              echo "❌ Frontend health check failed after ${MAX_ATTEMPTS} attempts"
              echo "📋 Container status:"
              cd seurasaeng_fe && docker-compose ps
              echo "📋 Frontend logs:"
              docker logs seuraseung-frontend --tail=50
              exit 1
            fi
            
            sleep 10
            ATTEMPT=$((ATTEMPT + 1))
          done
          
          # 메인 페이지 테스트
          echo "🔍 Testing main page..."
          if curl -f -s http://localhost/ > /dev/null; then
            echo "✅ Main page is accessible"
          else
            echo "❌ Main page test failed"
            exit 1
          fi
          
          # 백엔드 연결 테스트 (실패해도 배포는 성공)
          echo "🔍 Testing backend connectivity..."
          if curl -f -s http://10.0.2.165:8080/api/actuator/health > /dev/null; then
            echo "✅ Backend connectivity verified"
            
            # API 프록시 테스트
            if curl -f -s http://localhost/api/actuator/health > /dev/null; then
              echo "✅ API proxy is working"
            else
              echo "⚠️ API proxy test failed (but deployment continues)"
            fi
          else
            echo "⚠️ Backend is not available (frontend-only deployment)"
          fi
          
          echo "🎉 Frontend integration test completed successfully!"

  # 배포 후 알림 및 정리
  post-deployment:
    name: Post Deployment Tasks
    runs-on: ubuntu-latest
    needs: deploy-frontend
    if: always()
    
    steps:
    - name: Deployment Summary
      run: |
        echo "## Frontend Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "- **Status**: ${{ needs.deploy-frontend.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Deployment Time**: $(date)" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ needs.deploy-frontend.result }}" = "success" ]; then
          echo "- **Frontend URL**: http://${{ secrets.FRONT_SERVER_HOST }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Health Check**: http://${{ secrets.FRONT_SERVER_HOST }}/health" >> $GITHUB_STEP_SUMMARY
          echo "- **Status**: ✅ SUCCESS" >> $GITHUB_STEP_SUMMARY
        else
          echo "- **Status**: ❌ FAILED" >> $GITHUB_STEP_SUMMARY
          echo "- **Action Required**: Check deployment logs and consider rollback" >> $GITHUB_STEP_SUMMARY
        fi

    - name: Cleanup on Failure
      if: failure()
      run: |
        echo "🚨 Deployment failed! Manual intervention may be required."
        echo "🔍 Check the following:"
        echo "  1. Server connectivity"
        echo "  2. Docker container status"
        echo "  3. Nginx configuration"
        echo "  4. Frontend build issues"

# 백엔드 배포 (별도 워크플로우로 분리하거나 필요시 주석 해제)
# deploy-backend:
#   name: Deploy Backend to Private Server
#   runs-on: ubuntu-latest
#   if: contains(github.event.head_commit.modified, 'seurasaeng_be/') || github.event_name == 'workflow_dispatch'
#   
#   steps:
#   - name: Checkout code
#     uses: actions/checkout@v4
#     
#   - name: Set up JDK 21
#     uses: actions/setup-java@v4
#     with:
#       java-version: '21'
#       distribution: 'temurin'
#       
#   - name: Cache Maven dependencies
#     uses: actions/cache@v3
#     with:
#       path: ~/.m2
#       key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
#       restore-keys: ${{ runner.os }}-m2
#       
#   - name: Build with Maven
#     run: |
#       cd seurasaeng_be
#       mvn clean package -DskipTests
#       
#   - name: Build Docker image
#     run: |
#       cd seurasaeng_be
#       docker buildx build --platform linux/arm64 -t seuraseung-backend:latest . --load
#       
#   - name: Save Docker image
#     run: |
#       docker save seuraseung-backend:latest | gzip > seurasaeng_be-image.tar.gz
#       
#   - name: Deploy to Backend Server
#     uses: appleboy/ssh-action@v1.0.0
#     with:
#       host: ${{ secrets.BACK_SERVER_HOST }}
#       username: ubuntu
#       key: ${{ secrets.SSH_PRIVATE_KEY }}
#       script: |
#         # 백엔드 배포 로직
#         echo "Backend deployment logic here"